//Program GA Satu Variabel
#include<iostream>
#include<math.h>
#include<conio.h>
#include<time.h>
#include<cmath>
#include<fstream>
#include<stdlib.h>
#include<stdio.h>
#include<cstdlib>
using namespace std;
FILE *gp;



int main ()
{
   srand(time(NULL));
   double krom[100][100],subkrom[100][100],x[100],gx[100],probter[100],Q[100],s[100],beskrom[100];
   double biner,totfit,sumprob,fx,random,fbest=0.01,xbest,pi,a,b,y;
   int jdbin, inbin,nilbin,mpopu,subkr;
   int popu,nilpopu,iter,maxiter=15;
   int populasi[100];
   pi=M_PI;
   //jdbin=7;
    cout<<endl;
    cout<<"input banyaknya digit biner = ";cin>>jdbin;
    cout<<"input banyaknya populasi = ";cin>>mpopu;
    cout<<"input batas nilai atas x = ";cin>>b;
    cout<<"input batas nilai bawah x = ";cin>>a;
     //Mengkonversi Panjang Biner
    biner=log(fabs(b-a)*pow(10,jdbin))/log(2)+1;
    inbin=int(biner);
    cout<<endl;
    cout<<"panjang kromosom : "<<inbin;
    cout<<endl;
    //Penghitung Waktu Mulai
    //Proses GA Mulai
    FILE *gp=fopen("GA.txt", "w");
    clock_t start = clock();
    iter=1;
    do
    {
         //Membangkitkan Awal Populasi bimo
         for (int i=1;i<=mpopu;i++)
    {
        for (int j=0;j<=inbin-1;j++)
        {
            random=rand()%10;
            if (random<=9)
            {
                popu=0;
            }
            else
            {
                popu=2;
            }
            krom[i][j]=popu;
        }

    }

    //Mengisi Nilai Populasi
    for (int i=1;i<=mpopu;i++)
    {
        nilpopu=0;
        for(int j=0;j<=inbin-1;j++)
        {
            if (krom[i][j]>0)
            {
                nilbin=pow(2,j);
            }
            else
            {
                nilbin=0;
            }
            nilpopu=nilpopu+nilbin;
        }
        populasi[i]=nilpopu;
      }
      //Mengisi Nilai x dengan hasil populasi
      //x nilai real hasil populasi dan ini yang akan di optimalkan dengan fungsi objektifnya,
      for (int i=1;i<=mpopu;i++)
    {
        x[i]=a+(populasi[i]*(b-a)/(pow(2,inbin)-1));
        fprintf(gp, "%d %f\n",i,x[i]);
    }
    //Menghitung nIlai objektif dari x
    //f(x) adalah fungsi objektif dari x
    //Penetapan nilai fitness maksimum dari f(x) untuk meminimumkan nilai fungsi objektif
    //gx adalh fungsi fitness, biasanya gx dipilih yang maksimum dari nilai fungsi objektif dan non negatif
    for (int i=1;i<=mpopu;i++)
    {
        //fx=10+(sin (1/x[i])/((x[i]-0.16)*(x[i]-0.16)));
        fx=-0.5*x[i]+sin(x[i]);
        gx[i]=fabs(fx);
    }
    //Menghitung Nilai Fitness total yang akan digunakan untuk mencari probability yang terpilih
    totfit=0;

        for (int i=1;i<=mpopu;i++)
    {
         totfit=totfit+gx[i];
    }
    //Menghitung Nilai probability terpilih
    //Menghitung Jumlah Probability terpilih
    //Jumlah probability terpilih Q(i) akan menentukan (peluang) tahap crossover dan mutasi, Q disebut juga nilai roulette
    for (int i=1;i<=mpopu;i++)
    {
        probter[i]=gx[i]/totfit;
        sumprob=0;
        for (int j=1; j<=i; j++)
        {
            sumprob=sumprob+probter[j];
        }
        Q[i]=sumprob;
    }
    //Roulette kromosom
    //Misal ambil sejumlah kromosom =25
    for (int i=1;i<=25;i++)
    {
        random=(rand()%10000)*0.0001;
        for (int j=1;j<=mpopu;j++)
        {
            if (random<Q[j])
            {
              s[i]=j;
               break;
            }
        }
    }
    //Mengambil subkromosm yang terpilih
    for (int i=1;i<=25;i++)
    {
        subkr=s[i];
       for (int j=0;j<=inbin-1;j++)
       {
           subkrom[i][j]=krom[subkr][j];
       }

    }
    //Crossover kromosom
    //Rate Crossover 0.5
    //Misal dengan menukar sepuluh baris pertama kromosom dengan subkromosom
    //Baris berikutnya untuk subkromosom yang lainnya
    //Ganjil, Genap
    for (int i=1;i<=25;i+=2)
   {
       random=(rand()%10)*0.1;

       if (random<=0.5)
       {
         for (int m=1;m<=2;m++)
         {

          if (m==1)
           {
             mpopu=mpopu+1;
             for (int j=0;j<=10;j++)
             krom[mpopu][j]=subkrom[i+1][j];
             for (int j=11;j<=inbin-1;j++)
             krom[mpopu][j]=subkrom[i+1][j];
           }
           else
           {
              mpopu=mpopu+1;
             for (int j=0;j<=10;j++)
              krom[mpopu][j]=subkrom[i][j];
             for (int j=11; j<=inbin-1;j++)
              krom[mpopu][j]=subkrom[i][j];
           }
         }
       }
   }
    //Mutasi Kromosom
    //peluang mutan 0.33
    //Menetapkan kromosom baru dengan Mutasi tersebut
    //0->1, 1->0
    for (int i=1;i<=mpopu;i++)
    {
          for (int j=0;j<=inbin-1;j++)
            {
                random=(rand()%100)*0.01;
                if(random<=0.33)
                {
                    if (krom[i][j]==0)
                  {
                      krom[i][j]=1;
                  }
                 else
                  {
                     krom[i][j]=0;
                  }
                }

            }
    }
    // Mencari nilai x dan fx terbaik
    // Gunakan kromosom terbaru hasil mutasi untuk menghitung x,fx, terbaik
    // Ulangi Prosescm mencari nilai populasi terlebih dahulu (evolusi)
    //Mengisi Nilai Populasi
   for (int i=1;i<=mpopu;i++)
    {
        nilpopu=0;
        for(int j=0;j<=inbin-1;j++)
        {
            if (krom[i][j]>0)
            {

                nilbin=pow(2,j);
            }
            else
            {
                nilbin=0;
            }
            nilpopu=nilpopu+nilbin;
        }
        populasi[i]=nilpopu;
      }
      //Mengisi Nilai x dengan hasil populasi
      //x nilai real hasil populasi dan ini yang akan di optimalkan dengan fungsi objectifnya,
      for (int i=1;i<=mpopu;i++)
    {
        x[i]=a+(populasi[i]*(b-a)/(pow(2,inbin)-1));
        //printf("x = %5.3f = %5.3f + %5.3f * %5.3f\n", x[i], a, populasi[i], (b-a)/(pow(2,inbin)-1));
        fprintf(gp, "%f %f\n",i,x[i]);
    }
    //Menghitung nIlai objektif dari x
    //f(x) adalah fungsi objektif dari x
        for (int i=1;i<=mpopu;i++)
    {
        //fx=10+(sin (1/x[i])/((x[i]-0.16)*(x[i]-0.16)));
        fx=-0.5*x[i]+sin(x[i]);
        gx[i]=fabs(fx);
        if (fabs(fx)<fbest)
        {
            fbest=fx;
            xbest=x[i];
            for (int j=0;j<=inbin-1;j++)
            {
                beskrom[j]=krom[i][j];
            }
       }
    }

    iter++;

    }while(iter<maxiter);
fclose(gp);
cout<<"Nilai x optimum = "<<xbest<<endl;
cout<<"Optimum Fungsi = "<<fbest<<endl;
cout<<"Best Kromosom "<<endl;
for (int j=0;j<=inbin-1;j++)
{
    cout<<beskrom[j];cout<<" ";
}
clock_t ends = clock();
cout<<endl;
cout << "Lama Proses : "
<< (double) (ends - start) / CLOCKS_PER_SEC << endl;

return 0;
}
